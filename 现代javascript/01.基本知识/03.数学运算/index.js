// + 号出了可以拿来运算和字符串拼接,还可以用来转换字符串为数字:

// 对数字无效
let x = 1
console.log(+x) // 1

// 转化非数字
console.log(+true) // 1
console.log(+'') // 0
// 他的效果与 Number() 函数一样,但是更加简短

// + 号运算与其他的不一样,如果有字符串参与运算,则会转换为字符串拼接.
console.log(1 + '1') // '11',而不是 2

// 其他运算符都会将字符串转换为数字再运算
console.log(1 - '1') // 0
console.log(1 * '2') // 2
console.log(1 / '2') // 0.5

// 如果想要正常的加法运算,那么就可以用 + 来转化为数字(Number() 也可以)
console.log(1 + +'1') // 2
console.log(1 + Number('1')) // 2

// 赋值 = 返回一个值

// 因此, x = value 将 value 赋值给 x,然后返回 value
let a = 1,
  b = 2
let c = 3 - (a = b + 1)
console.log(a) // 3
console.log(c) // 0
// 尽量不要使用这种写法,因为会让代码变得难以理解

// 链式赋值
a = b = c = 2 + 2
console.log(a) // 4
console.log(b) // 4
console.log(c) // 4
/* 上面的代码等价于
  c = 2 + 2
  b = c
  a = b
*/

// 逗号运算符,优先级非常低
// 最少见最不常用
// 逗号运算符能让我们处理多个表达式，使用 , 将它们分开。每个表达式都运行了，但是只有最后一个的结果会被返回。
let num = (1 + 2, 3 + 4)
console.log(num) // 7
// 这里，第一个表达式 1 + 2 运行了，但是它的结果被丢弃了。随后计算 3 + 4，并且该计算结果被返回。

/* 思考题
  "" + 1 + 0
  "" - 1 + 0
  true + false
  6 / "3"
  "2" * "3"
  4 + 5 + "px"
  "$" + 4 + 5
  "4" - 2
  "4px" - 2
  "  -9  " + 5
  "  -9  " - 5
  null + 1
  undefined + 1
  " \t \n" - 2
  
  给出答案
*/

console.log('------------------**********------------------')

console.log('' + 1 + 0) // '10' (1)
console.log('' - 1 + 0) // -1 (2)
console.log(true + false) // 1
console.log(6 / '3') // 2
console.log('2' * '3') // 6
console.log(4 + 5 + 'px') // '9px'
console.log('$' + 4 + 5) // '$45'
console.log('4' - 2) // 2
console.log('4px' - 2) // NaN
console.log('  -9  ' + 5) // '  -9  5' (3)
console.log('  -9  ' - 5) // -14 (4)
console.log(null + 1) // 1 (5)
console.log(undefined + 1) // NaN (6)
console.log(' \t \n' - 2) // -2 (7)

/*
  1. 有字符串的加法 "" + 1，首先会将数字 1 转换为一个字符串："" + 1 = "1"，然后我们得到 "1" + 0，再次应用同样的规则得到最终的结果。
  2. 减法 -（像大多数数学运算一样）只能用于数字，它会使空字符串 "" 转换为 0。
  3. 带字符串的加法会将数字 5 加到字符串之后。
  4. 减法始终将字符串转换为数字，因此它会使 " -9 " 转换为数字 -9（忽略了字符串首尾的空格）。
  5. null 经过数字转换之后会变为 0。
  5. undefined 经过数字转换之后会变为 NaN。
  7. 字符串转换为数字时，会忽略字符串的首尾处的空格字符。在这里，整个字符串由空格字符组成，包括 \t, \n 以及它们之间的“常规”空格。因此，类似于空字符串，所以会变为 0。
*/
